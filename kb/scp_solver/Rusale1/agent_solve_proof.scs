agent_analogy
=> nrel_main_idtf:
	[агентная scp-программа стратегия] (* <- lang_ru;; *);
	[agent scp-program of solve] (* <- lang_en;; *);
	<- agent_scp_program;;

scp_program -> agent_analogy 
	(*
	-> rrel_params: .agent_analogy_params 
		(*
		-> rrel_1: rrel_in: _event;;
		-> rrel_2: rrel_in: _input_arc;;
		*);;

	-> rrel_operators: .agent_analogy_operator_set 
		(*
		-> rrel_init: .agent_analogy_operator1A 
			(*
		  	<- searchElStr3;;
		  	-> rrel_1: rrel_assign: rrel_scp_var: _temp;;
		  	-> rrel_2: rrel_fixed: rrel_scp_var: _input_arc;;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _quest;;

		  	=> nrel_goto: .agent_analogy_operator1B;;
			*);;

			-> .agent_analogy_operator1B (*
			<-printNl;;
			->rrel_1: rrel_fixed: rrel_scp_const: [Privet, I v agente!];;
			=>nrel_goto: .agent_analogy_operator1B2;;
			*);;

			-> .agent_analogy_operator1B2 (*
			<-printEl;;
			->rrel_1: rrel_fixed: rrel_scp_var: _quest;;
			=>nrel_goto: .agent_analogy_operator1B1;;
			*);;

		-> .agent_analogy_operator1B1 
			(*
		  	<- searchElStr3;;
		  	-> rrel_1: rrel_fixed: rrel_scp_const: question_analogy;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc5;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

		  	=> nrel_then: .agent_analogy_operator1D;;
		  	=> nrel_else: .agent_analogy_operator_return;;
			*);;

			-> .agent_analogy_operator1D (*
			<-printNl;;
			->rrel_1: rrel_fixed: rrel_scp_const: [Privet, I 2 raz v agente!];;
			=>nrel_goto: .agent_analogy_operator1D1;;
			*);;

		-> .agent_analogy_operator1D1
			(*
		  	<- searchElStr3;;
		  	-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _node;;

		  	=> nrel_then: .agent_analogy_operator2A;;
		  	=> nrel_else: .agent_analogy_operator_return;;
			*);;

		-> .agent_analogy_operator2A 
			(*
		 	<- genEl;;
		 	-> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _answer;;

		 	=> nrel_goto: .agent_analogy_operator2B1;;
		 	*);;
			
		-> .agent_analogy_operator2B1 (*
			<-printEl;;
			->rrel_1: rrel_fixed: rrel_scp_var: _node;;
			=>nrel_goto: .agent_analogy_operator2B;;
			*);;

		 -> .agent_analogy_operator2B (*
		  <- call;;
		  -> rrel_1: rrel_fixed: rrel_scp_const: proc_analogy_task;;
		  -> rrel_2: rrel_fixed: rrel_scp_const: .agent_analogy_operator2B_params (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _node;;
                -> rrel_2: rrel_fixed: rrel_scp_var: _answer;;
			*);;
		  -> rrel_3: rrel_assign: rrel_scp_var: _descr1;;

		  => nrel_goto: .agent_analogy_operator2C;;
		*);;

		-> .agent_analogy_operator2C (*
		  <- waitReturn;;
		  -> rrel_1: rrel_fixed: rrel_scp_var: _descr1;;

		  => nrel_goto: .agent_analogy_operator2D;;
		*);; 

          -> .agent_analogy_operator2D 
			(*
		  	<- genElStr5;;
		  	-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
		  	-> rrel_2: rrel_assign: rrel_common: rrel_const: rrel_scp_var: _arc;;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _answer;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_const: rrel_scp_var: _arc2;;
		  	-> rrel_3: rrel_fixed: rrel_scp_const: nrel_answer;;

		  	=> nrel_goto: .agent_analogy_operator_return;;
			*);;       
					
		 -> .agent_analogy_operator_return (*
		  <- return;;
		*);;
	*);;
*);;

