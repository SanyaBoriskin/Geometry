stat_Pythagorean_theorem -> rrel_if: [* concept_rectangular_triangle _-> _tr1;; *];;
stat_Pythagorean_theorem -> rrel_then: [* _tr1 _=> nrel_cathetus:: _cat1; _cat2;;
					  _tr1 _=> nrel_hypotenuse:: _hyp1;;
					  _cat1 _=> nrel_length:: _le1;;
					  _cat2 _=> nrel_length:: _le2;;
					  _hyp1 _=> nrel_length:: _le3;;
					  concept_segment _-> _cat1; _cat2; _hyp1;;
					  concept_quantity _-> _le1; _le2; _le3; _pow1; _pow2; _pow3;;
					  _con1 _=> nrel_pow:: _pow1;;
					  _con1 _-> rrel_base_of_power:: _le1;;
					  _con1 _-> rrel_exponent_of_power:: 2;;
					  _con2 _=> nrel_pow:: _pow2;;
					  _con2 _-> rrel_base_of_power:: _le2;;
					  _con2 _-> rrel_exponent_of_power:: 2;;
					  _con3 _=> nrel_pow:: _pow3;;
					  _con3 _-> rrel_base_of_power:: _le3;;
					  _con3 _-> rrel_exponent_of_power:: 2;;
					  _con4 _=> nrel_sum:: _pow3;;
					  _con4 _-> _pow1; _pow2;;
					  *];;
stat_Pythagorean_theorem <- nrel_implication;;
stat_Pythagorean_theorem <- sc_statement;;


task_node -> rrel_1: Task_Pattern;;
task_node <- sc_task; sc_node_struct;;
Task_Pattern = [* concept_rectangular_triangle -> Rect_Tri_ABC;;
Rect_Tri_ABC => nrel_cathetus: Segm_AB;;
Rect_Tri_ABC => nrel_hypotenuse: Segm_AC;;
Segm_AB => nrel_length: len1;;
Segm_AC => nrel_length: len3;;
concept_segment -> Segm_AB; Segm_AC;;
concept_quantity -> len1; len3;;
*];;

concept_quantity <= nrel_using_constants: 
	{
	nrel_value;
	number;
	nrel_identification
	};;

rrel_example <- sc_relation;;

rrel_base_of_power <- sc_node_role_relation;;

rrel_base_of_power => nrel_main_idtf: [основание степени'] (* <- lang_ru;; *);;

rrel_exponent_of_power <- sc_node_role_relation;;

rrel_exponent_of_power => nrel_main_idtf: [показатель степени'] (* <- lang_ru;; *);;

nrel_pow <- sc_node_norole_relation;;

nrel_pow => nrel_main_idtf: [возведение в степень*] (* <- lang_ru;; *);;

stat_Rectangular_sign -> l_part_Rectangular_sign;;
l_part_Rectangular_sign = [* concept_rectangular_triangle _-> _tr11;; *];;
stat_Rectangular_sign -> r_part_Rectangular_sign;;
r_part_Rectangular_sign = [* _tr11 _=> nrel_internal_angle:: _angle1;;
			    _angle1 _<- concept_right_angle;; 
			    _tr11 _<- concept_triangle;; *];;

stat_Rectangular_sign <- nrel_equivalence;;
stat_Rectangular_sign <- sc_statement;;
atomic_existence -> l_part_Rectangular_sign; r_part_Rectangular_sign;;

Task_Pattern3 = [* Tri_L1_L2_L3 <- concept_triangle;;
Tri_L1_L2_L3 => nrel_internal_angle: Right_Angle_L1_L2;;
Right_Angle_L1_L2 <- concept_right_angle;; *];;

task_node5 -> rrel_1: Task_Pattern3;;
task_node5 <- sc_task; sc_node_struct;;
